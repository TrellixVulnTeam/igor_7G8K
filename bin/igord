#!/bin/env python
# -*- coding: utf-8 -*-

import json
import os
import sys
import base64
import logging
import logging.config
import time
import re
import bottle
import io
import tarfile
from string import Template

from igor.testing import *
from igor.virt import *
from igor.cobbler import Cobbler
from igor.job import *
import igor.utils as utils
import igor.reports as reports
import igor.hosts as hosts

import igor.config as config

BOTTLE_MAX_READ_SIZE=1024*1024*512

#logging.config.fileConfig("logconf.ini")
logging.basicConfig( \
    format='%(levelname)s - %(asctime)s - %(module)s - %(message)s', \
    level=logging.DEBUG)
logger = logging.getLogger(__name__)

#
# Parse the config at first
#
CONFIG = config.parse_config()

__cobbler_origin_args = (CONFIG["cobbler.url"], \
                         CONFIG["cobbler.username"], \
                         CONFIG["cobbler.password"], \
                         CONFIG["cobbler.iso_injection.ssh_uri"])

#
# Now define our origins, where we get the items (hosts, profiles, â€¦) from
#
testsuite_origins = {
    "filesystem": \
        FilesystemTestsuitesOrigin(CONFIG["testcases.path"].split(":"))
}

profile_origins = {
    "cobbler": \
        cobbler.ProfileOrigin(*__cobbler_origin_args)
}

host_origins = {
    "libvirt": \
        virt.VMAlwaysCreateHostOrigin( \
                    CONFIG["libvirtd.connection_uri"], \
                    CONFIG["libvirtd.virt-install.storage_pool"], \
                    CONFIG["libvirtd.virt-install.network_configuration"]),

    "cobbler": \
        # Just systems with igor- prefix
        cobbler.HostsOrigin(*__cobbler_origin_args, expression="igor-"),

    "files": \
        hosts.FilesystemRealHostsOrigin(CONFIG["hosts.path"].split(":"))
}

#
# Now prepare the essential objects
#
jc = JobCenter(session_path=CONFIG["session.path"])

inventory = Inventory( \
    plans={}, \
    testsuites=testsuite_origins, \
    profiles=profile_origins, \
    hosts=host_origins)
inventory.check()


class IgordJSONEncoder(json.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, Job) or isinstance(obj, Testsuite) or \
           isinstance(obj, Testset) or isinstance(obj, Testcase) or \
           isinstance(obj, Profile) or isinstance(obj, Origin) or \
           isinstance(obj, Host):
            return obj.__to_dict__()
        elif isinstance(obj, utils.State):
            return str(obj)
        return json.JSONEncoder.default(self, obj)


def to_json(obj):
    format = "json"
    root_tag = "result"

    r = json.dumps(obj, cls=IgordJSONEncoder, sort_keys=True, indent=2)

    if "format" in bottle.request.query:
        format = bottle.request.query["format"]
    if "root" in bottle.request.query:
        root_tag = bottle.request.query["root"]

    if "x-igor-format-xml" in bottle.request.headers:
        format = "xml"

    if format == "xml":
        j = json.loads(r)
        r = "<?xml-stylesheet type='text/xsl' href='/ui/index.xsl' ?>\n"
        r += utils.obj2xml(root_tag, j, as_string=True)
    bottle.response.content_type = "application/%s" % format
    return r


#
# bottles
#
@bottle.route('/')
def index():
    bottle.response.content_type = "text/xml"
    return "<?xml-stylesheet type='text/xsl' href='/ui/index.xsl' ?>\n<index/>"

@bottle.route('/ui/<filename>')
def ui_data(filename):
    return bottle.static_file(filename, root=config.DATA_DIR + "/ui/")

@bottle.route('/static/data/<filename>')
def static_data(filename):
    return bottle.static_file(filename, root=config.DATA_DIR)

@bottle.route('/submit/<tname>/with/<pname>/on/<hname>')
@bottle.route('/submit/<tname>/with/<pname>/on/<hname>/<cookiereq>')
def submit_testsuite(tname, pname, hname, cookiereq=None):
    args = ()
    for key, name in [("testsuites", tname), \
                      ("profiles", pname), \
                      ("hosts", hname)]:
        item = inventory._lookup(key, name)
        if item is None:
            bottle.abort(412, "Unknown %s '%s'" % (key, name))
        args += (item,)
    args += (cookiereq,)
    logger.debug("Submitting with args: %s" % str(args))
    resp = jc.submit_testsuite(*args)

    return to_json(resp)


@bottle.route('/jobs')
def get_jobs():
    return to_json(jc.get_jobs())


@bottle.route('/job/start/<cookie>')
def start_job(cookie):
    if cookie not in jc.jobs:
        bottle.abort(404, "Unknown job '%s'" % cookie)
    m = jc.start_job(cookie)
    return to_json(m)


@bottle.route('/job/status/<cookie>')
def job_status(cookie):
    if cookie not in jc.jobs:
        bottle.abort(404, "Unknown job '%s'" % cookie)
    m = jc.jobs[cookie]
    return to_json(m)


@bottle.route('/job/report/<cookie>')
def job_report(cookie):
    if cookie not in jc.jobs:
        bottle.abort(404, "Unknown job '%s'" % cookie)
    j = jc.jobs[cookie]
    bottle.response.content_type = "text/plain; charset=utf8"
    return str(reports.status_to_report(j.__to_dict__()))


@bottle.route('/job/step/<cookie>/<n:int>/<result:re:success|failed>')
def finish_step(cookie, n, result):
    if cookie not in jc.jobs:
        bottle.abort(404, "Unknown job '%s'" % cookie)
    note = None
    m = jc.finish_test_step(cookie, n, result == "success", note)
    return to_json(m)


@bottle.route('/job/abort/<cookie>')
def abort_job(cookie):
    if cookie not in jc.jobs:
        bottle.abort(404, "Unknown job '%s'" % cookie)
    try:
        m = jc.abort_job(cookie)
    except Exception as e:
        m = e.message
    return to_json(m)


@bottle.route('/job/testsuite/for/<cookie>')
def get_testsuite_archive(cookie):
    if cookie not in jc.jobs:
        bottle.abort(404, "Unknown job '%s'" % cookie)
    t = jc.jobs[cookie].testsuite
    r = t.get_archive()
    if not r:
        bottle.abort(404, 'No testsuite for %s' % (cookie))

    return r.getvalue()


@bottle.route('/job/artifact/for/<cookie>/<name>', method='PUT')
def add_artifact(cookie, name):
    if cookie not in jc.jobs:
        bottle.abort(404, "Unknown job '%s'" % cookie)
    if "/" in name:
        bottle.abort(412, "Name may not contain slashes")
    j = jc.jobs[cookie]
    data = bottle.request.body.read(BOTTLE_MAX_READ_SIZE)
    j.add_artifact(name, data)


@bottle.route('/job/artifact/from/<cookie>')
def get_artifacts(cookie):
    if cookie not in jc.jobs:
        bottle.abort(404, "Unknown job '%s'" % cookie)
    j = jc.jobs[cookie]
    return j.get_artifacts_archive().getvalue()


@bottle.route('/firstboot/<cookie>')
@bottle.route('/job/<cookie>/set/enable_pxe/<enable_pxe>')
def disable_pxe_cb(cookie, enable_pxe=False):
    if cookie not in jc.jobs:
        bottle.abort(404, "Unknown job '%s'" % cookie)
    j = jc.jobs[cookie]
    m = j.profile.enable_pxe(j.host, enable_pxe)
    return to_json(m)


@bottle.route('/job/<cookie>/set/kernelargs/<kernelargs>')
def set_kernelargs_cb(cookie, kernelargs):
    if cookie not in jc.jobs:
        bottle.abort(404, "Unknown job '%s'" % cookie)
    raise Exception("Not implemented yet, but needed for updates")
    j = jc.jobs[cookie]
    m = j.profile.set_kargs(j.host, kernelargs)
    return to_json(m)


@bottle.route('/testjob/<cookie>')
def get_bootstrap_script(cookie):
    if cookie not in jc.jobs:
        bottle.abort(404, "Unknown job '%s'" % cookie)

    disable_pxe_cb(cookie)

    script = None

    with open(os.path.join(config.DATA_DIR, "client-bootstrap.sh"), "r") as f:
        script = f.read()

    r = Template(script).safe_substitute(
        igor_cookie=cookie,
        igor_current_step=jc.jobs[cookie].current_step,
        igor_testsuite=jc.jobs[cookie].testsuite.name
    )

    if not r:
        bottle.abort(404, 'No testsuite for %s' % (cookie))

    return r


@bottle.route('/testsuites')
def list_testsuites():
    testsuites = inventory.testsuites()
    return to_json(testsuites)

@bottle.route('/testsuites/<name>/summary')
def get_testsuite_summary(name):
    testsuites = inventory.testsuites()
    if name not in testsuites:
        bottle.abort(404, "Unknown testsuite '%s'" % name)
    return to_json(testsuites[name])


@bottle.route('/testsuites/<name>/download')
def get_testsuite_archive(name):
    testsuites = inventory.testsuites()
    if name not in testsuites:
        bottle.abort(404, "Unknown testsuite '%s'" % name)
    t = testsuites[name]
    r = t.get_archive()
    if not r:
        bottle.abort(404, 'No testsuite for %s' % (cookie))
    return r.getvalue()


@bottle.route('/profiles')
def list_profiles():
    return to_json(inventory.profiles())


@bottle.route('/hosts')
def list_hosts():
    return to_json(inventory.hosts())


@bottle.route('/testsuites/<tsname>/testcases/<tcname>/source')
def testcase_source(tsname, tcname):
    testsuites = inventory.testsuites()
    if name not in testsuites:
        bottle.abort(404, "Unknown testsuite '%s'" % name)
    t = testsuites[name]
    source = None
    for case in t.testcases():
        if case.name == tcname:
            source = case.source()
            break
    if source == None:
        abort(404, "Unknown testcase '%s'" % tcname)
    return source

@bottle.route('/profiles/<pname>', method='PUT')
def profile_from_vmlinuz_put(pname):
    reqfiles = set(["kernel", "initrd", "kargs"])
    _tmpdir = utils.TemporaryDirectory(reqfiles)
    with _tmpdir as tmpdir:
        logger.debug("Using PUT tmpdir %s" % tmpdir)
        with tarfile.open(fileobj=bottle.request.body) as tarball:
            arcfiles = tarball.getnames()
            logger.debug("PUT %s" % arcfiles)
            if not all([r in arcfiles for r in reqfiles]):
                bottle.abort(412, "Expecting %s files" % str(reqfiles))
            tarball.extractall(path=tmpdir)
        written_files = {fn: os.path.join(tmpdir, fn) for fn in reqfiles}
        inventory.create_profile(oname="cobbler", pname=pname, \
                                 **written_files)
    _tmpdir.clean()

@bottle.route('/profiles/<pname>', method='POST')
def profile_from_vmlinuz_post(pname):
    reqfiles = set(["kernel", "initrd", "kargs"])
    _tmpdir = utils.TemporaryDirectory(reqfiles)
    with _tmpdir as tmpdir:
        logger.debug("Using tmpdir %s" % tmpdir)
        if not all([r in bottle.request.files.keys() for r in reqfiles]):
            bottle.abort(412, "Not all required files given: %s" % reqfiles)
        file_dict = {field: store for field, store \
                                  in bottle.request.files.items()}
        written_files = {}
        for filename, store in file_dict.items():
            dstn = os.path.join(tmpdir, filename)
            with open(dstn, "wb") as d:
                logger.debug("Writing '%s'" % d)
                d.write(store.file.read())
                written_files[filename] = dstn
        inventory.create_profile(oname="cobbler", pname=pname, \
                                 **written_files)
    _tmpdir.clean()

@bottle.route('/profiles/<pname>', method='DELETE')
@bottle.route('/profiles/<pname>/remove')
def delete_profile(pname):
    if pname not in inventory.profiles():
        bottle.abort(404, "Unknown profile")
    inventory.profiles()[pname].delete()

if __name__ == "__main__":
    try:
    #    logger.info("Starting igord")
        bottle.run(host='0.0.0.0', port=8080, reloader=False)
    except KeyboardInterrupt:
        logger.debug("Cleaning")
        jc.clean()
