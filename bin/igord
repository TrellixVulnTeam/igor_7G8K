#!/bin/env python
# -*- coding: utf-8 -*-

import json
import os
import sys
import base64
import logging
import logging.config
import time
import re
import bottle
from string import Template

from igor.testing import *
from igor.virt import *
from igor.cobbler import Cobbler
from igor.job import *
import igor.utils as utils
import igor.reports as reports

import igor.config as config

#logging.config.fileConfig("logconf.ini")
logging.basicConfig( \
    format='%(levelname)s - %(asctime)s - %(module)s - %(message)s', \
    level=logging.DEBUG)
logger = logging.getLogger(__name__)

CONFIG = config.parse_config()

jc = JobCenter(session_path=CONFIG["session.path"])
cobbler = Cobbler(CONFIG["cobbler.url"], (CONFIG["cobbler.username"], \
                  CONFIG["cobbler.password"]))


def list_testsuites():
    testsuites = Factory.testsuites_from_paths( \
                                           CONFIG["testcases.path"].split(":"))
    logger.debug("Number of testsuites: %s" % len(testsuites))
    return testsuites


def list_cobbler_profiles():
    """This is actually creating cobbler system, in cobbler terms
    """
    profiles = {}
    with cobbler.new_session() as cblr_sess:
        for cprofile in cblr_sess.profiles():
            profiles[cprofile] = cobbler.new_profile(cprofile, {
              "kernel_options": " ".join([CONFIG["cobbler.kargs"], \
                                            CONFIG["cobbler.kargs_install"]]),
              "kernel_options_post": CONFIG["cobbler.kargs"],
              })
    logger.debug("Number of profiles: %s" % len(profiles))
#    logger.debug("Profiles: %s" % profiles)
    return profiles


def list_virt_hosts():
    logger.warning("We are currently using a default host")
    hosts = {}
    hosts["default"] = VMHostFactory.create_default_host( \
        connection_uri=CONFIG["libvirtd.connection_uri"], \
        storage_pool=CONFIG["libvirtd.virt-install.storage_pool"],
        network_configuration=CONFIG["libvirtd.virt-install" + \
                                     ".network_configuration"])
    logger.debug("Number of hosts: %s" % len(hosts))
    return hosts


inventory = Inventory( \
    plans=[],
    testsuites=[list_testsuites],
    profiles=[list_cobbler_profiles],
    hosts=[list_virt_hosts])
inventory.check()


class IgordJSONEncoder(json.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, Job) or isinstance(obj, Testsuite) or \
           isinstance(obj, Testset) or isinstance(obj, Testcase):
            return obj.__to_dict__()
        elif isinstance(obj, utils.State):
            return str(obj)
        return json.JSONEncoder.default(self, obj)


def to_json(obj):
    format = "json"
    r = json.dumps(obj, cls=IgordJSONEncoder, sort_keys=True, indent=2)
    if "x-igor-format-xml" in bottle.request.headers:
        format = "xml"
        r = json.loads(r)
        r = utils.obj2xml("result", r, as_string=True)
    bottle.response.content_type = "application/%s" % format
    return r


def _req_cookie():
    cookie_key = "x-igor-cookie"
    if cookie_key not in bottle.request.headers:
        bottle.abort("Cookie missing")
    cookie = bottle.request.headers[cookie_keys]
    if cookie not in jc.open_jobs:
        bottle.abort("Unknown job")
    return cookie


#
# bottles
#
@bottle.route('/submit/<tname>/with/<pname>/on/<hname>')
@bottle.route('/submit/<tname>/with/<pname>/on/<hname>/<cookiereq>')
def submit_testsuite(tname, pname, hname, cookiereq=None):
    args = ()
    for key, name in [("testsuites", tname), \
                      ("profiles", pname), \
                      ("hosts", hname)]:
        item = inventory._lookup(key, name)
        if item is None:
            bottle.abort(412, "Unknown %s '%s'" % (key, name))
        args += (item,)
    args += (cookiereq,)
    logger.debug("Submitting with args: %s" % str(args))
    resp = jc.submit_testsuite(*args)

    return to_json(resp)


@bottle.route('/jobs')
def get_jobs():
    return to_json(jc.get_jobs())


@bottle.route('/job/start/<cookie>')
def start_job(cookie):
    if cookie not in jc.jobs:
        bottle.abort(404, "Unknown job '%s'" % cookie)
    m = jc.start_job(cookie)
    return to_json(m)


@bottle.route('/job/status/<cookie>')
def job_status(cookie):
    if cookie not in jc.jobs:
        bottle.abort(404, "Unknown job '%s'" % cookie)
    m = jc.jobs[cookie]
    return to_json(m)


@bottle.route('/job/report/<cookie>')
def job_report(cookie):
    if cookie not in jc.jobs:
        bottle.abort(404, "Unknown job '%s'" % cookie)
    j = jc.jobs[cookie]
    return str(reports.status_to_report(j.__to_dict__()))


@bottle.route('/job/step/<cookie>/<n:int>/<result:re:success|failed>')
def finish_step(cookie, n, result):
    if cookie not in jc.jobs:
        bottle.abort(404, "Unknown job '%s'" % cookie)
    note = None
    m = jc.finish_test_step(cookie, n, result == "success", note)
    return to_json(m)


@bottle.route('/job/abort/<cookie>')
def abort_job(cookie):
    if cookie not in jc.jobs:
        bottle.abort(404, "Unknown job '%s'" % cookie)
    try:
        m = jc.abort_job(cookie)
    except Exception as e:
        m = e.message
    return to_json(m)


@bottle.route('/job/testsuite/for/<cookie>')
def get_testsuite_archive(cookie):
    if cookie not in jc.jobs:
        bottle.abort(404, "Unknown job '%s'" % cookie)
    t = jc.jobs[cookie].testsuite
    r = t.get_archive()
    if not r:
        bottle.abort(404, 'No testsuite for %s' % (cookie))

    return r.getvalue()


@bottle.route('/job/artifact/for/<cookie>/<name>', method='PUT')
def add_artifact(cookie, name):
    if cookie not in jc.jobs:
        bottle.abort(404, "Unknown job '%s'" % cookie)
    if "/" in name:
        bottle.abort(412, "Name may not contain slashes")
    j = jc.jobs[cookie]
    data = bottle.request.body.read()
    j.add_artifact(name, data)


@bottle.route('/job/artifact/from/<cookie>')
def get_artifacts(cookie):
    if cookie not in jc.jobs:
        bottle.abort(404, "Unknown job '%s'" % cookie)
    j = jc.jobs[cookie]
    return j.get_artifacts_archive().getvalue()


@bottle.route('/firstboot/<cookie>')
@bottle.route('/job/<cookie>/set/enable_pxe/<enable_pxe>')
def disable_pxe_cb(cookie, enable_pxe=False):
    if cookie not in jc.jobs:
        bottle.abort(404, "Unknown job '%s'" % cookie)
    j = jc.jobs[cookie]
    m = j.profile.enable_pxe(j.host, enable_pxe)
    return to_json(m)


@bottle.route('/job/<cookie>/set/kernelargs/<kernelargs>')
def set_kernelargs_cb(cookie, kernelargs):
    if cookie not in jc.jobs:
        bottle.abort(404, "Unknown job '%s'" % cookie)
    raise Exception("Not implemented yet, but needed for updates")
    j = jc.jobs[cookie]
    m = j.profile.set_kargs(j.host, kernelargs)
    return to_json(m)


@bottle.route('/testjob/<cookie>')
def get_bootstrap_script(cookie):
    if cookie not in jc.jobs:
        bottle.abort(404, "Unknown job '%s'" % cookie)

    disable_pxe_cb(cookie)

    script = None

    with open(os.path.join(config.DATA_DIR, "client-bootstrap.sh"), "r") as f:
        script = f.read()

    r = Template(script).safe_substitute(
        igor_cookie=cookie,
        igor_current_step=jc.jobs[cookie].current_step,
        igor_testsuite=jc.jobs[cookie].testsuite.name
    )

    if not r:
        bottle.abort(404, 'No testsuite for %s' % (cookie))

    return r


@bottle.route('/static/data/<filename>')
def static_data(filename):
    return bottle.static_file(filename, root=config.DATA_DIR)


@bottle.route('/testsuite/<name>/summary')
def get_testsuite_summary(name):
    testsuites = load_testsuites()
    if name not in testsuites:
        bottle.abort(404, "Unknown testsuite '%s'" % name)
    return to_json(testsuites[name])


@bottle.route('/testsuite/<name>/download')
def get_testsuite_archive(name):
    testsuites = load_testsuites()
    if name not in testsuites:
        bottle.abort(404, "Unknown testsuite '%s'" % name)
    t = testsuites[name]
    r = t.get_archive()
    if not r:
        bottle.abort(404, 'No testsuite for %s' % (cookie))

    return r.getvalue()


if utils.parse_bool(CONFIG["cobbler.iso_injection.enable"]):
    logger.info("Enabling remote ISO injection/management for cobbler")

    @bottle.route('/extra/profile/add/<pname>/iso/<isoname>/remote', method='PUT')
    def add_iso_profile_remote(pname, isoname):
        retval = 0
        with utils.TemporaryDirectory() as tmpdir:
            logger.debug("Writing iso file.")
            with open(os.path.join(tmpdir, isoname), "wb") as isofile:
                isofile.write(bottle.request.body.read())
            logger.debug("Done writing iso file.")
            cmd = """
    cd {tmpdir}
    [[ -e "{isoname}" ]] || ( echo NO {isoname} ; exit 1; )
    ls -lah
    export KOPTS="{kopts}" # To reduce the number of opts
    bash "{config_datadir}/cobbler_iso_tool.sh" remote_add "{sshuri}" "{profilename}" "{isoname}" >&2
    RETVAL=$?
    rm -f "{isoname}"
    exit $RETVAL
    """.format( \
            config_datadir=config.DATA_DIR, \
            tmpdir=tmpdir, \
            sshuri=CONFIG["cobbler.iso_injection.remote_cobbler_ssh_uri"], \
            profilename=pname, \
            isoname=isoname,
            kopts=CONFIG["cobbler.iso_injection.remote_cobbler_kopts"])
            retval, stdout = run(cmd, with_retval=True)
        return to_json((retval, stdout))

    @bottle.route('/extra/profile/remove/<pname>/remote')
    def remove_iso_profile_remote(pname):
        retval = 0
        with utils.TemporaryDirectory() as tmpdir:
            cmd = """
    cd {tmpdir}
    bash "{config_datadir}/cobbler_iso_tool.sh" remote_remove "{sshuri}" "{profilename}"
    exit 0
    """.format( \
            config_datadir=config.DATA_DIR, \
            tmpdir=tmpdir, \
            sshuri=CONFIG["cobbler.iso_injection.remote_cobbler_ssh_uri"], \
            profilename=pname)
            retval, stdout = run(cmd, with_retval=True)
        return to_json((retval, stdout))


if __name__ == "__main__":
    try:
    #    logger.info("Starting igord")
        bottle.run(host='0.0.0.0', port=8080, reloader=False)
    except KeyboardInterrupt:
        logger.debug("Cleaning")
        jc.clean()
